package com.github4sanjay.dsalgo.dynamic.strings;

import java.util.HashMap;

/*
 * Given a string, find the count of distinct subsequences of it.
 *
 * Examples:
 *
 * Input  : str = "gfg"
 * Output : 7
 * The seven distinct subsequences are "", "g", "f",
 * "gf", "fg", "gg" and "gfg"
 *
 * Input  : str = "ggg"
 * Output : 4
 * The four distinct subsequences are "", "g", "gg"
 * and "ggg"
 */
public class CountDistinctSubsequences {

  public static void main(String[] args) {
    System.out.println(CountDistinctSubsequences.count("gfg"));
    System.out.println(CountDistinctSubsequences.count("ggg"));
    System.out.println(CountDistinctSubsequences.count("abcbac"));
  }

  /*
   * For string "abcbac" total 50
   *
   *        .    |      a    |     b      |        c     |       b        |       a        |           c
   *    _________|___________|____________|______________|________________|________________|_____________________
   *        1    |    1*2=2  |    2*2=4   |      4*2=8   |   8*2=16-2=14  |   14*2=28-1=27 |    27*2=54-4=50
   *    _________|___________|____________|______________|________________|________________|_____________________
   *        .    |      .    |     .      |       .      |     .          |     .          |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |      a    |     a      |       a      |     a          |     a          |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |     b      |       b      |     b          |     b          |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |     ab     |       ab     |     ab         |     ab         |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |        c     |      c         |     c          |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |        ac    |      ac        |     ac         |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |        bc    |      bc        |     bc         |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |        abc   |      abc       |     abc        |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |      b(not)    |     bb         |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |      ab(not)   |     abb        |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |      bb        |     cb         |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |      abb       |     acb        |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |       cb       |     bcb        |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |       acb      |     abcb       |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |       bcb      |     a(not)     |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |       abcb     |     aa         |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     ba         |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     aba        |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     ca         |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     aca        |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     bca        |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     abca       |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     bba        |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     abba       |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     cba        |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     acba       |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     bcba       |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *             |           |            |              |                |     abcba      |
   *    _________|___________|____________|______________|________________|________________|_____________________
   *
   *  If there are no repetitions, then count becomes double of count for n-1 because we get count(n-1) more subsequences
   *  by adding current character at the end of all subsequences possible with n-1 length.
   *  If there repetitions, then we find a count of all distinct subsequences ending with the previous occurrence.
   *  This count can be obtained by recursively calling for an index of the previous occurrence.
   *
   * @param str string to find count of distinct subsequence
   * @return count of distinct subsequence
   */
  public static int count(String str) {

    int[] dp = new int[str.length() + 1];
    dp[0] = 1; // for empty subsequence
    var map = new HashMap<Character, Integer>();
    for (int i = 1; i < dp.length; i++) {
      dp[i] = dp[i - 1] * 2;
      char ch = str.charAt(i - 1);
      if (map.containsKey(ch)) {
        var lastOccurrence = map.get(ch);
        dp[i] = dp[i] - dp[lastOccurrence - 1];
      }
      map.put(ch, i);
    }
    return dp[str.length()];
  }
}
